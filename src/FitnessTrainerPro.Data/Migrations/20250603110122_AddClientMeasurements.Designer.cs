// <auto-generated />
using System;
using FitnessTrainerPro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessTrainerPro.Data.Migrations
{
    [DbContext(typeof(FitnessDbContext))]
    [Migration("20250603110122_AddClientMeasurements")]
    partial class AddClientMeasurements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Goals")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientID");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ClientAssignedProgram", b =>
                {
                    b.Property<int>("ClientAssignedProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TrainerNotesForClient")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("ClientAssignedProgramID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ProgramID");

                    b.ToTable("ClientAssignedPrograms");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ClientMeasurement", b =>
                {
                    b.Property<int>("MeasurementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ChestCm")
                        .HasColumnType("REAL");

                    b.Property<int>("ClientID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("HipsCm")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double?>("WaistCm")
                        .HasColumnType("REAL");

                    b.Property<double?>("WeightKg")
                        .HasColumnType("REAL");

                    b.HasKey("MeasurementID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientMeasurements");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentNeeded")
                        .HasColumnType("TEXT");

                    b.Property<string>("MuscleGroup")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("ExerciseID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ProgramExercise", b =>
                {
                    b.Property<int>("ProgramExerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExerciseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderInProgram")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reps")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RestSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProgramExerciseID");

                    b.HasIndex("ExerciseID");

                    b.HasIndex("ProgramID");

                    b.ToTable("ProgramExercises");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.WorkoutProgram", b =>
                {
                    b.Property<int>("ProgramID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Focus")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ProgramID");

                    b.ToTable("WorkoutPrograms");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ClientAssignedProgram", b =>
                {
                    b.HasOne("FitnessTrainerPro.Core.Models.Client", "Client")
                        .WithMany("AssignedPrograms")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrainerPro.Core.Models.WorkoutProgram", "WorkoutProgram")
                        .WithMany("ClientAssignments")
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ClientMeasurement", b =>
                {
                    b.HasOne("FitnessTrainerPro.Core.Models.Client", "Client")
                        .WithMany("Measurements")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.ProgramExercise", b =>
                {
                    b.HasOne("FitnessTrainerPro.Core.Models.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessTrainerPro.Core.Models.WorkoutProgram", "WorkoutProgram")
                        .WithMany("ProgramExercises")
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.Client", b =>
                {
                    b.Navigation("AssignedPrograms");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("FitnessTrainerPro.Core.Models.WorkoutProgram", b =>
                {
                    b.Navigation("ClientAssignments");

                    b.Navigation("ProgramExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
